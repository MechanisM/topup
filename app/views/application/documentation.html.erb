<%= h1 "Installation" %>
<p>
  Setting up TopUp for your website requires the least amount of effort. You have the choice of either hosting the javascript and images on your own webserver or you can just
  include the javascript with one line of code and that's it! This has been made possible because TopUp injects the stylesheet code in the webpage. Choosing for the last option gives you the 
  possibility of always being up-to-date with the latest features and bugfixes WITHOUT altering your code!
</p>
<br>
<h3>
  When including from gettopup.com (the easiest setup)
</h3>
<ol>
  <li>
    Put the following in the <span class="code">head</span> element:
    <div class="box code">
      &lt;script type="text/javascript" src="http://gettopup.com/releases/latest/top_up-min.js">&lt;/script>
    </div>
    <small>
      <strong>Note: You can configure TopUp (libs, <%= link_to "fast mode", documentation_path(:anchor => "function_enable_fast_mode") %>, paths) in the querystring of the URL (read <%= link_to "documentation", documentation_path(:anchor => "configure_top_up_with_the_query_string") %>)</strong>
    </small>
    <div class="top_padded">
      ( you can also include a specific release by replacing <span class="code">latest</span> with the version e.g. <span class="code">1.3.2</span> )
    </div>
  </li>
</ol>
<h3>
  When hosting the Javascript and images yourself
</h3>
<ol>
  <li>
    Download and unpack the <%= link_to "latest TopUp version", "http://gettopup.com/releases/packed/latest.zip" %>
  </li>
  <li>
    Copy the entire(!) <strong>jquery</strong> directory in the same directory as the TopUp Javascript file. TopUp will automatically determine which Javascript libraries
    (jQuery and/or jQuery UI) to include from the <strong>jquery</strong> directory when missing.
    Please note that TopUp will only include <strong>one</strong>(!) file to reduce the amount of HTTP requests! An include will look like this:
    <div class="box code">
      &lt;script type="text/javascript" src="path/to/your/jquery/*.js">&lt;/script>
    </div>
  </li>
  <li>
    Copy the entire(!) <strong>images</strong> directory to the correct location.
    At default, TopUp assumes that the images reside at the same host as the file itself in the following path <span class="code">/images/top_up/</span>.
    You can change the path (and even the host) by changing the variables <span class="code">TopUp.host</span> and <span class="code">TopUp.images_path</span> as the following:
    <div class="box code">
      &lt;script type="text/javascript"><br>
      &nbsp; TopUp.host = "http://www.anotherwebsite.com/";<br>
      &nbsp; TopUp.images_path = "assets/images/top_up/";<br>
      &lt;/script>
    </div>
    <small>
      <strong>Note:&nbsp; The proper place for Rails developers would be the <span class="code">application.js</span></strong>
    </small>
  </li>
  <li>
    Copy the entire(!) <strong>players</strong> directory to the correct location.
    At default, TopUp assumes that the players reside at the same host as the file itself in the following path <span class="code">/players/</span>.
    You can change the path and host by changing the variables <span class="code">TopUp.host</span> and <span class="code">TopUp.players_path</span> as the following:
    <div class="box code">
      &lt;script type="text/javascript"><br>
      &nbsp; TopUp.host = "http://www.anotherwebsite.com/";<br>
      &nbsp; TopUp.players_path = "assets/players/";<br>
      &lt;/script>
    </div>
    <small>
      <strong>Note:&nbsp; The proper place for Rails developers would be the <span class="code">application.js</span></strong>
    </small>
  </li>
  <li>
    Now you start using TopUp on your webpages by putting the following in the <span class="code">head</span> element:
    <div class="box code">
      &lt;script type="text/javascript" src="path/to/your/top_up-min.js">&lt;/script>
    </div>
    <small>
      <strong>Note: You can configure TopUp (libs, <%= link_to "fast mode", documentation_path(:anchor => "function_enable_fast_mode") %>, paths) in the querystring of the URL (read <%= link_to "documentation", documentation_path(:anchor => "configure_top_up_with_the_query_string") %>)</strong>
    </small>
  </li>
</ol>
<p>
  Remember: You can still use <strong><%= link_to "Prototype", "http://prototypejs.org" %></strong> without having conflicts, just make sure you include TopUp first.
</p>

<%= h1 "Configure TopUp with the query string" %>
<p>
  It is possible to configure TopUp without(!) typing a single line of Javascript code. How can this be done? By passing parameters in the query string of the TopUp library inclusion URL. You can configure the following:
</p>
<ul class="bottom_padded">
  <li>which jQuery libraries to auto-include or not to auto-include libraries at all</li>
  <li>whether to <%= link_to "enable fast mode", documentation_path(:anchor => "function_enable_fast_mode") %> for better performance in IE</li>
  <li>the variables <span class="code">TopUp.host</span>, <span class="code">TopUp.images_path</span> and <span class="code">TopUp.players_path</span></li>
</ul>
<p>
  A few examples to configure TopUp:
</p>
<ol class="configure_top_up">
  <li class="bottom_padded">
    <span class="code">libs</span> &nbsp;-&nbsp; Specify which jQuery libraries to auto-include or not to auto-include libraries at all:<br>
    
    <div class="top_padded">
      <small><strong>Instruct TopUp not to auto-include any jQuery libraries at all</strong></small>
    </div>
    <div class="box code">
      &lt;script type="text/javascript" src="path/to/top_up-min.js?libs=">&lt;/script>
    </div>
    
    <div class="top_padded">
      <small><strong>Instruct TopUp only to auto-include the jQuery Core library</strong></small>
    </div>
    <div class="box code">
      &lt;script type="text/javascript" src="path/to/top_up-min.js?libs=core">&lt;/script>
    </div>
    
    <div class="top_padded">
      <small><strong>Instruct TopUp to auto-include the jQuery Core library and jQuery Effects Core & Clip library</strong></small>
    </div>
    <div class="box code">
      &lt;script type="text/javascript" src="path/to/top_up-min.js?libs=core+clip">&lt;/script>
    </div>
    
    <div class="top_padded">
      Available libs:
    </div>
    <div style="padding-top: 4px">
      <% LIBS.each do |lib| %>
      <span class="code"><%= ljust_lib lib["key"] %></span>&nbsp;-&nbsp; <%= lib["description"] %><br>
      <% end %>
    </div>
  </li>
  <li class="bottom_padded">
    <span class="code">fast_mode</span> &nbsp;-&nbsp; Specify whether <%= link_to "fast mode", documentation_path(:anchor => "function_enable_fast_mode") %> has to be enabled or not:<br>
    
    <div class="top_padded">
      <small><strong>Instruct TopUp to enable fast mode</strong></small>
    </div>
    <div class="box code">
      &lt;script type="text/javascript" src="path/to/top_up-min.js?fast_mode=1">&lt;/script>
    </div>
  </li>
  <li class="bottom_padded">
    <span class="code">host, images_path, players_path</span> &nbsp;-&nbsp; Override the default assets variables:<br>
    
    <div class="top_padded">
      <small><strong>Alter the <span class="code">TopUp.images_path</span> variable</strong></small>
    </div>
    <div class="box code">
      &lt;script type="text/javascript" src="path/to/top_up-min.js?images_path=/foo">&lt;/script>
    </div>
  </li>
  <li>
    And as usual with URL query string parameters, you can combine them using '&':<br>
    
    <div class="top_padded">
      <small><strong>Instruct TopUp only to auto-include the jQuery Core library and to enable fast mode</strong></small>
    </div>
    <div class="box code">
      &lt;script type="text/javascript" src="path/to/top_up-min.js?libs=core&fast_mode=1">&lt;/script>
    </div>
  </li>
</ol>

<%= h1 "Setting up link elements" %>
<p>
  You can accomplish this in 3 ways:
</p>
<ol>
  <li>
    By adding the class <span class="code">top_up</span> to the link:
    <div class="box code">
      &lt;a href="/images/photos/1.jpg" class="top_up"><br>
      &nbsp; &lt;img src="/images/thumbnails/1.jpg"/><br>
      &lt;/a>
    </div>
    <small>
      <strong>Note:&nbsp; TopUp will appear in the default preset</strong>
    </small>
  </li>
  <li>
    By specifying TopUp options in the <span class="code">toptions</span> attribute of the link:
    <div class="box code">
      &lt;a href="/images/photos/1.jpg" toptions="shaded = 1, overlayClose = 1"><br>
      &nbsp; &lt;img src="/images/thumbnails/1.jpg"/><br>
      &lt;/a>
    </div>
    <small>
      <strong>Note:&nbsp; Adding the class </strong><span class="code">top_up</span><strong> is not required anymore</strong>
    </small>
  </li>
  <li>
    By specifying TopUp preset(s). Presets make it possible to assign certain toptions for a specific group of elements.
    Such a group is identified using the well-known CSS selector. Using TopUp presets keeps your HTML code clean and keeps it simple.
    The following shows an example of specifying <span class="code">toptions</span> for (1) links within the element with the id <span class="code">images</span> and
    (2) for elements with the class <span class="code">shaded</span>:
    <div class="box code">
      &lt;script type="text/javascript"><br>
      &nbsp; TopUp.addPresets({<br>
      &nbsp; &nbsp; "#images a": {<br>
      &nbsp; &nbsp; &nbsp; group: "images",<br>
      &nbsp; &nbsp; &nbsp; layout: "quicklook",<br>
      &nbsp; &nbsp; &nbsp; modal: 0<br>
      &nbsp; &nbsp; },<br>
      &nbsp; &nbsp; ".shaded": {<br>
      &nbsp; &nbsp; &nbsp; shaded: 1<br>
      &nbsp; &nbsp; }<br>
      &nbsp; });<br>
      &lt;/script>
    </div>
    <small>
      <strong>Note:&nbsp; The proper place for Rails developers would be the <span class="code">application.js</span></strong>
    </small>
  </li>
</ol>

<a name="available_toptions"></a>

<%= h1 "Available toptions" %>
<p>
  As mentioned earlier, you can pass options to TopUp by using either the attribute <span class="code">toptions</span> or by specifying a TopUp preset.
  This is an overview of the possible toptions you can pass. Most of them are self describing.
</p>

<table>
  <thead>
    <tr>
      <th>Name</th>
      <th>Default</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <% TOPTIONS.each do |toption| %>
    <tr valign="top">
      <td class="name">
        <span>
          <a name="toption_<%= toption["name"].underscore %>"></a>
        </span>
        <%= toption["name"] %>
      </td>
      <td class="default">
        <%= toption["default"] %>
      </td>
      <td class="description">
        <%= toption["description"] %>
        <div class="box">
          <small>
            <i>Options:</i>&nbsp; <%= toption["options"] %>
          </small>
        </div>
      </td>
    </tr>
    <% end %>
  </tbody>
</table>

<%= h1 "Just call your friend TopUp!" %>
<p>
  Eventually, all the TopUp actions are initiated by function calls to the TopUp <%= link_to "Javascript module", "http://yuiblog.com/blog/2007/06/12/module-pattern/" %>.
  Adding the <span class="code">top_up</span> class, the <span class="code">toptions</span> attribute or specifying TopUp presets only tells TopUp to bind the click event of the elements to
  a wrapper function in the TopUp module that there upon calls the core function to display TopUp. Aside from <span class="code">TopUp.display()</span>, the TopUp module also has several other 
  functions to communicate.
</p>

<table>
  <thead>
    <tr>
      <th>Name</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <% FUNCTIONS.each do |function| %>
    <tr valign="top">
      <td class="call">
        <span>
          <a name="function_<%= function["call"].match(/^(TopUp\.)([\w_]+)/)[2].to_s.underscore %>"></a>
        </span>
        <%= function["call"] %>
      </td>
      <td class="description">
        <%= function["description"] %>
      </td>
    </tr>
    <% end %>
  </tbody>
</table>
